'use strict'
/* Git позволяет сохранять версии проекта. Помогает откатиться на старую версию, вносить изменения и так далее

В репозитории может работать несколько человек

Есть git и гитхаб. Это разные вещи. Гитхаб - удалённое хранилище репозиториев, гит - программа для создания репозиториев

В этом уроке разобраны базовые и необходимые технологии по гиту. Более подробно можно изучить на этом ресурсе https://githowto.com/ru

Команды для гита лучше вбивать в терминале. В командной строке, которую можно открыть в нужной папке. Для этого нужно зайти в нужную папку, зажать shift и кликнуть пкм, затем выбрать пункт Открыть окно PowerShell здесь

Самый простой вариант начать работу с гит внутри папки это в вскоде нажать в левом нижнем углу на иконки с кругом и треугольником, выбрать там Терминал и выбрать Git Bash

Теперь можно перейти к практике. Для начала нужно сказать гиту чтобы он следил именно за этой папкой. Для этого есть команда git init. Теперь в папке с проектом должна появиться папка .git

Кстати, если у вас появляется ошибка fatal: filename too long, то вот видео как её пофиксить: https://hub.tcno.co/windows/tips/fix-filename-too-long/

После того как мы создали репозиторий, нам нужно настроит систему гит. Обычно над проектом работает несколько человек, и чтобы видеть кто внёс изменения, то нужно представиться. Для этого нужно прописать имя и email. Чтобы это прописать нужно ввести команду git config, а затем нужно определиться с тем, как именно мы будем вносить конфигурацию - локально или глобально. Глобально применит настройки для всего пк, и все проекты, которые мы будем создавать, будут от нашего имени. Также можно настроить и локально - это делается если нужно указать в другом проекте другое имя, или если будут какие-то конкретные требования по именам. В этом проекте давайте сделаем локальное имя. Делается это следующимо образом:

git config --local user.name "Artyom Motorin" // имя пишем в кавычках

Также потребуется сделать email:

git config --local user.email artem-motorin@mail.ru // email без кавычек

Чтобы убедиться, что изменения внеслись, можно зайти в папку .git, найти там файл config и посмотреть значения name и email

Кстати, если вы работаете с гитом в первый раз, то введите имя и email через global

Теперь поговорим о том, как работает эта система

У гита есть 3 состояния файла:

1. Файлы просто созданы

Например мы только что создали файлы и они просто лежат в проекте

2. Гит следит за определенными файлами(index, индексирует их)

3. Создание контрольной точки к которой можно вернуться(commit)

Чтобы просмотреть статус репозитория нужно прописать команду git status

Сейчас мы видим что у нас нет commit, то есть нет ни одной контрольной точки

Также гит говорит, что пока что он не следит за файлами. Файлы указаны в списке. Пока что они просто созданы. Это их первое состояние

Чтобы перенести файлы во второе состояние(индекс) нужно прописать команду git add -A(-A означает, что все непроиндексированные файлы добавятся в индекс и получат второе состояние)

После того как мы пропишем эту команду то можно ещё раз посмотреть что изменилось используя git status. Он покажет что уже есть файлы за которыми он следит, и их можно закоммитить, чтобы создать контрольную точку

Если мы добавим ещё один новый файл, и вызовем git status, то мы увидим, что гит не будет его отслеживать

Чтобы гит следил за новый файлом то можно прописать git add -A, либо вместе -A написать название нужного файла без кавычек. Давайте сделаем новый файл и добавим ему второе состояние

Теперь давайте закоммитим все эти файлы. Для этого нужно прописать следующую команду:

git commit -a -m"Какое-то сообщение"

-a - опять же как и в случае с git add обозначает все файлы, -m - это сообщение, которое будет сообщать с чем связан этот коммит. Мы вкртаце добавляем что именно мы сделали в этой контрольной точке

Теперь все файлы сохранились

Сейчас давайте попробуем добавить какие-то изменения в index.html, например давайте добавим заголовок h1

Если сейчас написать git status, то мы увидим, что гит подсказывает, что некоторые файлы были изменены

Теперь нам нужно всю работу проделать ещё раз. Переведём измененные файлы во второе и затем в третье состояние, чтобы закоммитить изменения

Чтобы посмотреть какие коммиты были добавлены, нужно прописать команду git log

Чтобы с локальными файлами могли работать другие люди, нужно выложить созданный репозиторий на гитхаб

Переходим в гитхаб, нажимаем создать новый репозиторий

Пишем название репозитория, делаем его приватным либо публичным, пока что не добавляем README файл, так как добавим его другим способом и нажимаем создать репозитрий. Далее появляется окно в котором есть разные варианты каким образом добавить файлы в репозиторий. Нас инетерсует второй вариант. Мы хотим связать локальный репозиторий с удалённым, для этого мы пишем в вскоде следующую команду:

git remote add origin https://github.com/ArtemMotor/test-work-with-git-23082023.git

remote add - команда, которая добавляет локальный репозиторий в удалённый. origin - название удалённого репозитория, далее идёт ссылка на удаленный репозиторий, которую мы взяли из окошка в гитхаб

Теперь остается только добавить локальные файлы в удаленный репозиторий. Для этого пишем команду git push -u origin main

Важно заметить, что сейчас мы работали в ветке master, но сам гитхаб рекомендует переименовать её в main. Для этого после того, как первый коммит готов, нужно в терминале по очереди ввести следующие команды:

git remote add origin https://github.com/ArtemMotor/work-with-git.git
git branch -M main
git push -u origin main

таким образом мы просто переименуем ветку и свяжем локальный репозиторий с удалённыым

Теперь наши файлы добавились в указанный репозиторий. Теперь если мы хотим добавить новые изменения, то просто запоминаем алгоритм:

1. Сначала добавляем все файлы в индекс с помощью git add -A
2. Далее создаем коммит с понятным коротким сообщением git commit -a -m"Какое-то сообщение"
3. Пушим коммит в удаленнный репозиторий с помощью git push
*/
